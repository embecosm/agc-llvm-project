; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=agc -verify-machineinstrs < %s | FileCheck %s

; Check that args are inserted in the right locations according to the calling
; convention, returns are retrieved from the right locations, and calls are
; inserted correctly.

declare void @callee_1xi16(i16)

define void @call_1xi16(i16 %a) {
; CHECK-LABEL: call_1xi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ca %banks(callee_1xi16)
; CHECK-NEXT:    ts r62
; CHECK-NEXT:    ca %lo12(callee_1xi16)
; CHECK-NEXT:    ts r63
; CHECK-NEXT:    tc __dispatch
; CHECK-NEXT:    tc 2
entry:
  call void @callee_1xi16(i16 %a)
  ret void
}

declare void @callee_2xi16(i16, i16)

define void @call_2xi16(i16 %a) {
; CHECK-LABEL: call_2xi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ca r50
; CHECK-NEXT:    ts r51
; CHECK-NEXT:    ca %banks(callee_2xi16)
; CHECK-NEXT:    ts r62
; CHECK-NEXT:    ca %lo12(callee_2xi16)
; CHECK-NEXT:    ts r63
; CHECK-NEXT:    tc __dispatch
; CHECK-NEXT:    tc 2
entry:
  call void @callee_2xi16(i16 %a, i16 %a)
  ret void
}

declare void @callee_3xi16(i16, i16, i16)

define void @call_3xi16(i16 %a) {
; CHECK-LABEL: call_3xi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ca r50
; CHECK-NEXT:    ts r51
; CHECK-NEXT:    xch r50
; CHECK-NEXT:    ts r52
; CHECK-NEXT:    xch r50
; CHECK-NEXT:    ca %banks(callee_3xi16)
; CHECK-NEXT:    ts r62
; CHECK-NEXT:    ca %lo12(callee_3xi16)
; CHECK-NEXT:    ts r63
; CHECK-NEXT:    tc __dispatch
; CHECK-NEXT:    tc 2
entry:
  call void @callee_3xi16(i16 %a, i16 %a, i16 %a)
  ret void
}

declare void @callee_1xi32(i32)

define void @call_1xi32(i32 %a) {
; CHECK-LABEL: call_1xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ca %banks(callee_1xi32)
; CHECK-NEXT:    ts r62
; CHECK-NEXT:    ca %lo12(callee_1xi32)
; CHECK-NEXT:    ts r63
; CHECK-NEXT:    tc __dispatch
; CHECK-NEXT:    tc 2
entry:
  call void @callee_1xi32(i32 %a)
  ret void
}

declare void @callee_2xi32(i32, i32)

define void @call_2xi32(i32 %a) {
; CHECK-LABEL: call_2xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extend
; CHECK-NEXT:    dca rd50
; CHECK-NEXT:    xch l
; CHECK-NEXT:    ts r53
; CHECK-NEXT:    xch l
; CHECK-NEXT:    ts r52
; CHECK-NEXT:    ca %banks(callee_2xi32)
; CHECK-NEXT:    ts r62
; CHECK-NEXT:    ca %lo12(callee_2xi32)
; CHECK-NEXT:    ts r63
; CHECK-NEXT:    tc __dispatch
; CHECK-NEXT:    tc 2
entry:
  call void @callee_2xi32(i32 %a, i32 %a)
  ret void
}

declare i16 @callee_ret_i16()

define i16 @call_ret_i16() {
; CHECK-LABEL: call_ret_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ca %banks(callee_ret_i16)
; CHECK-NEXT:    ts r62
; CHECK-NEXT:    ca %lo12(callee_ret_i16)
; CHECK-NEXT:    ts r63
; CHECK-NEXT:    tc __dispatch
; CHECK-NEXT:    tc 2
entry:
  %0 = call i16 @callee_ret_i16()
  ret i16 %0
}

declare i32 @callee_ret_i32()

define i32 @call_ret_i32() {
; CHECK-LABEL: call_ret_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ca %banks(callee_ret_i32)
; CHECK-NEXT:    ts r62
; CHECK-NEXT:    ca %lo12(callee_ret_i32)
; CHECK-NEXT:    ts r63
; CHECK-NEXT:    tc __dispatch
; CHECK-NEXT:    tc 2
entry:
  %0 = call i32 @callee_ret_i32()
  ret i32 %0
}
