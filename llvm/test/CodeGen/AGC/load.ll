; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=agc -verify-machineinstrs < %s | FileCheck %s

define i16 @load(i16* %ptr) {
; CHECK-LABEL: load:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    index r50
; CHECK-NEXT:    ca 0
; CHECK-NEXT:    ts r50
; CHECK-NEXT:    tc 2
entry:
  %0 = load i16, i16* %ptr
  ret i16 %0
}

define i16 @load_offs(i16* %ptr) {
; CHECK-LABEL: load_offs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    index r50
; CHECK-NEXT:    ca 2
; CHECK-NEXT:    ts r50
; CHECK-NEXT:    tc 2
entry:
  %0 = ptrtoint i16* %ptr to i16
  %1 = add i16 %0, 2
  %2 = inttoptr i16 %1 to i16*
  %3 = load i16, i16* %2
  ret i16 %3
}

define i16 @load_zero() {
; CHECK-LABEL: load_zero:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ca zero
; CHECK-NEXT:    ts r50
; CHECK-NEXT:    tc 2
entry:
  ret i16 0
}

define i16 @load_const() {
; CHECK-LABEL: load_const:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ca %cpi(31)
; CHECK-NEXT:    ts r50
; CHECK-NEXT:    tc 2
entry:
  ret i16 31
}

@globl = global i16 0

define i16 @load_global() {
; CHECK-LABEL: load_global:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ca %banks(globl)
; CHECK-NEXT:    ts fb
; CHECK-NEXT:    ca %lo12(globl)
; CHECK-NEXT:    ts r50
; CHECK-NEXT:    tc 2
entry:
  %0 = load i16, i16* @globl
  ret i16 %0
}

define i16 @load_global_offs() {
; CHECK-LABEL: load_global_offs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ca %banks(globl+2)
; CHECK-NEXT:    ts fb
; CHECK-NEXT:    ca %lo12(globl+2)
; CHECK-NEXT:    ts r50
; CHECK-NEXT:    tc 2
entry:
  %0 = ptrtoint i16* @globl to i16
  %1 = add i16 %0, 2
  %2 = inttoptr i16 %1 to i16*
  %3 = load i16, i16* %2
  ret i16 %3
}
